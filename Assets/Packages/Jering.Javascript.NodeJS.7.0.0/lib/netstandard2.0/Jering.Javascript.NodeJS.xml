<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Jering.Javascript.NodeJS</name>
    </assembly>
    <members>
        <member name="T:Jering.Javascript.NodeJS.INodeJSService">
            <summary>
            An abstraction for invoking code in NodeJS.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromFileAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module on disk.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>To avoid rereads and recompilations on subsequent invocations, NodeJS caches the module using the its absolute path as cache identifier.</para>
            </remarks>
            <example>
            If we have a file named exampleModule.js (located in <c>NodeJSProcessOptions.ProjectPath</c>), with contents:
            <code language="javascript">module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });</code>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">Result? result = await nodeJSService.InvokeFromFileAsync&lt;Result&gt;("exampleModule.js", args: new[] { "success" });
            
            Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromFileAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module on disk.</summary>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>To avoid rereads and recompilations on subsequent invocations, NodeJS caches the module using the its absolute path as cache identifier. </para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStringAsync``1(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleString">The module in string form. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends <paramref name="moduleString" /> to NodeJS where it's compiled it for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both <paramref name="moduleString" /> and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending <paramref name="moduleString" />.</para>
            </remarks>
            <example>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">Result? result = await nodeJSService.InvokeFromStringAsync&lt;Result&gt;("module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });", 
                args: new[] { "success" });
            
            Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStringAsync(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <param name="moduleString">The module in string form. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends <paramref name="moduleString" /> to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both <paramref name="moduleString" /> and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending <paramref name="moduleString" />.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStringAsync``1(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module string. This value must not be <c>null</c> and it must not return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module string using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStringAsync(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <param name="moduleFactory">The factory that creates the module string. This value must not be <c>null</c> and it must not return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module string using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStreamAsync``1(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleStream">The module in stream form. This value must not be <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends the stream to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both the stream and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream.</para>
            </remarks>
            <example>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">using (var memoryStream = new MemoryStream())
            using (var streamWriter = new StreamWriter(memoryStream))
            {
                // Write the module to a MemoryStream for demonstration purposes.
                streamWriter.Write("module.exports = (callback, message) =&gt; callback(null, {resultMessage: message});");
                streamWriter.Flush();
                memoryStream.Position = 0;
            
                Result? result = await nodeJSService.InvokeFromStreamAsync&lt;Result&gt;(memoryStream, args: new[] { "success" });
                
                Assert.Equal("success", result?.Message);
            }</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStreamAsync(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <param name="moduleStream">The module in stream form. This value must not be <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends the stream to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both the stream and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStreamAsync``1(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module stream. This value must not be <c>null</c> and it must not return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module stream using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.InvokeFromStreamAsync(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <param name="moduleFactory">The factory that creates the module stream. This value must not be <c>null</c> and it must not return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module stream using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Attempts to invoke a function from a module in NodeJS's cache.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns a (bool, T) with the bool set to true on 
             success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <example>
             Using the class <c>Result</c>:
             <code language="csharp">public class Result
             {
                 public string? Message { get; set; }
             }</code>
             The following assertion will pass:
             <code language="csharp">// Cache the module
             string cacheIdentifier = "exampleModule";
             await nodeJSService.InvokeFromStringAsync&lt;Result&gt;("module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });", 
                 cacheIdentifier,
                 args: new[] { "success" });
            
             // Invoke from cache
             (bool success, Result? result) = await nodeJSService.TryInvokeFromCacheAsync&lt;Result&gt;(cacheIdentifier, args: new[] { "success" });
            
             Assert.True(success);
             Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Attempts to invoke a function from a module in NodeJS's cache.</summary>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns true on success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSService.MoveToNewProcessAsync">
            <summary>Moves subsequent invocations to a new NodeJS process.</summary>
            <returns>The <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
            <remarks>
                <para>This method exposes the system used by file watching (see <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" />) and process retries 
            (see <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumProcessRetries" />) to move to new processes.</para>
                <para>When is access to this system useful? Consider the situation where your application uses file watching.
            If your application knows when files change (e.g. your application is the actor changing files) you can manually invoke this method instead of using file 
            watching. This enables you to avoid the overhead of file watching.</para>
                <para>You do not need to await this method. Subsequent invocations are wait asynchronously until the new process is ready.</para>
                <para>The method respects <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.GracefulProcessShutdown" />.</para>
            </remarks>
        </member>
        <member name="T:Jering.Javascript.NodeJS.NodeJSServiceCollectionExtensions">
            <summary>
            Extension methods for setting up NodeJS in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSServiceCollectionExtensions.AddNodeJS(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds NodeJS services to the an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The target <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.InvocationError">
            <summary>
            Represents an error caught in NodeJS.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationError.#ctor(System.String,System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationError" />.
            </summary>
            <param name="errorMessage">The error's description.</param>
            <param name="errorStack">The error's NodeJS stack trace.</param>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationError.ErrorMessage">
            <summary>
            The error's description.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationError.ErrorStack">
            <summary>
            The error's NodeJS stack trace.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.InvocationException">
            <summary>
            Represents an unrecoverable issue encountered when trying to invoke javascript in NodeJS.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationException.#ctor">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationException" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationException.#ctor(System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationException" />.
            </summary>
            <param name="message">The NodeJS error's description.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationException.#ctor(System.String,System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationException" />.
            </summary>
            <param name="message">The NodeJS error's description.</param>
            <param name="stack">The NodeJS error's stack trace.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationException" />.
            </summary>
            <param name="info">The data store for serialization/deserialization.</param>
            <param name="context">The struct representing the source and destination of a serialized stream.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.InvocationRequest">
            <summary>
            Represents an invocation request for NodeJS.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationRequest.#ctor(Jering.Javascript.NodeJS.ModuleSourceType,System.String,System.String,System.String,System.Object[],System.IO.Stream)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationRequest" />.
            </summary>
            <param name="moduleSourceType">The module's source type.</param>
            <param name="moduleSource">
                <para>The module's source.</para>
                <para>This value may be the module's path relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />, the module as a string, or the module's cache identifier.</para>
                <para>If <paramref name="moduleSourceType" /> is not <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.Stream" />, this value must not be <c>null</c>. Additionally, if <paramref name="moduleSourceType" /> 
            is <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.File" /> or <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.String" />, this value must not be an empty string or whitespace.</para>
            </param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, no attempt is made to retrieve or cache <c>module.exports</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="moduleStreamSource">The module as a <see cref="T:System.IO.Stream" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleSourceType" /> is <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.Stream" /> but <paramref name="moduleStreamSource" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="moduleSourceType" /> is <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.Cache" /> but <paramref name="moduleSource" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleSourceType" /> is <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.File" /> or <see cref="F:Jering.Javascript.NodeJS.ModuleSourceType.String" /> but <paramref name="moduleSource" /> 
            is <c>null</c>, whitespace or an empty string.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationRequest.ResetStreamPosition">
            <summary>
            Resets <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> to its initial position.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is an unseekable <see cref="T:System.IO.Stream" />.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationRequest.CheckStreamAtInitialPosition">
            <summary>
            Returns a boolean value indicating whether or not <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is at its initial position.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is an unseekable <see cref="T:System.IO.Stream" />.</exception>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleSourceType">
            <summary>
            Gets the source type of the module.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleSource">
            <summary>
            Gets the module's source
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.CacheIdentifier">
            <summary>
            Gets the module's cache identifier.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.ExportName">
            <summary>
            Gets the name of the function in <c>module.exports</c> to invoke.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.Args">
            <summary>
            Gets the sequence of JSON-serializable arguments to pass to the function to invoke.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource">
            <summary>
            Gets the module as a <see cref="T:System.IO.Stream" />.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.ModuleSourceType">
            <summary>
            Source type of the module to be invoked in NodeJS.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.ModuleSourceType.Cache">
            <summary>
            A module cached in NodeJS.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.ModuleSourceType.File">
            <summary>
            A file.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.ModuleSourceType.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.ModuleSourceType.Stream">
            <summary>
            A Stream.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.Concurrency">
            <summary>
            Concurrency modes for invocations.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.Concurrency.None">
            <summary>
            Single threaded.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.Concurrency.MultiProcess">
            <summary>
            Multi-process.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.ConfigureNodeJSProcessOptions">
            <summary>
            An <see cref="T:Microsoft.Extensions.Options.IConfigureOptions`1" /> implementation for configuring <see cref="T:Jering.Javascript.NodeJS.NodeJSProcessOptions" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConfigureNodeJSProcessOptions.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.ConfigureNodeJSProcessOptions" />.
            </summary>
            <param name="serviceScopeFactory">The factory for creating <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope" />s.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConfigureNodeJSProcessOptions.Configure(Jering.Javascript.NodeJS.NodeJSProcessOptions)">
            <summary>
            Configures a <see cref="T:Jering.Javascript.NodeJS.NodeJSProcessOptions" /> using data from the application's <see cref="T:System.IServiceProvider" />.
            </summary>
            <param name="options">The target <see cref="T:Jering.Javascript.NodeJS.NodeJSProcessOptions" /> to configure.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.ConnectionException">
            <summary>
            Represents an unrecoverable issue encountered when connecting to NodeJS.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConnectionException.#ctor">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.ConnectionException" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConnectionException.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.ConnectionException" />.
            </summary>
            <param name="message">The connection issue's description.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.ConnectionException" />.
            </summary>
            <param name="info">The data store for serialization/deserialization.</param>
            <param name="context">The struct representing the source and destination of a serialized stream.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.ConnectionException" />.
            </summary>
            <param name="message">The connection issue's description.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.HttpClientService">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IHttpClientService" />.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.HttpClientService.Timeout">
            <summary>
            Gets or sets the timespan to wait before the request times out.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpClientService.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions})">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.HttpClientService" />.
            </summary>
            <param name="httpClient">The <see cref="T:System.Net.Http.HttpClient" /> to send HTTP requests with.</param>
            <param name="outOfProcessNodeJSServiceOptionsAccessor">The <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions" /> accessor.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpClientService.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
            Send an HTTP request as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send.</param>
            <param name="completionOption">When the operation should complete (as soon as a response is available or after reading the whole response content).</param>
            <param name="cancellationToken">The cancellation token to cancel operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">The request was null.</exception>
            <exception cref="T:System.InvalidOperationException">The request message was already sent by the System.Net.Http.HttpClient instance.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</exception>
        </member>
        <member name="T:Jering.Javascript.NodeJS.HttpNodeJSPoolService">
            <summary>
            An implementation of <see cref="T:Jering.Javascript.NodeJS.INodeJSService" /> that uses Http for inter-process communication with a pool of NodeJS processes.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.HttpNodeJSPoolService.Size">
            <summary>
            Gets the size of the <see cref="T:Jering.Javascript.NodeJS.HttpNodeJSPoolService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{Jering.Javascript.NodeJS.HttpNodeJSService})">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.HttpNodeJSPoolService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.Dispose">
            <summary>
            Disposes this instance. This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.Dispose(System.Boolean)">
            <summary>
            Disposes the instance. This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.
            </summary>
            <param name="disposing">True if the object is disposing or false if it is finalizing.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromFileAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module on disk.</summary>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>To avoid rereads and recompilations on subsequent invocations, NodeJS caches the module using the its absolute path as cache identifier. </para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStreamAsync(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <param name="moduleFactory">The factory that creates the module stream. This value must not be <c>null</c> and it must not return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module stream using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStreamAsync(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <param name="moduleStream">The module in stream form. This value must not be <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends the stream to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both the stream and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStringAsync(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <param name="moduleFactory">The factory that creates the module string. This value must not be <c>null</c> and it must not return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module string using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStringAsync(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <param name="moduleString">The module in string form. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends <paramref name="moduleString" /> to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both <paramref name="moduleString" /> and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending <paramref name="moduleString" />.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Attempts to invoke a function from a module in NodeJS's cache.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns a (bool, T) with the bool set to true on 
             success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <example>
             Using the class <c>Result</c>:
             <code language="csharp">public class Result
             {
                 public string? Message { get; set; }
             }</code>
             The following assertion will pass:
             <code language="csharp">// Cache the module
             string cacheIdentifier = "exampleModule";
             await nodeJSService.InvokeFromStringAsync&lt;Result&gt;("module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });", 
                 cacheIdentifier,
                 args: new[] { "success" });
            
             // Invoke from cache
             (bool success, Result? result) = await nodeJSService.TryInvokeFromCacheAsync&lt;Result&gt;(cacheIdentifier, args: new[] { "success" });
            
             Assert.True(success);
             Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.TryInvokeFromCacheAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Attempts to invoke a function from a module in NodeJS's cache.</summary>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns true on success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromFileAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module on disk.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>To avoid rereads and recompilations on subsequent invocations, NodeJS caches the module using the its absolute path as cache identifier.</para>
            </remarks>
            <example>
            If we have a file named exampleModule.js (located in <c>NodeJSProcessOptions.ProjectPath</c>), with contents:
            <code language="javascript">module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });</code>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">Result? result = await nodeJSService.InvokeFromFileAsync&lt;Result&gt;("exampleModule.js", args: new[] { "success" });
            
            Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStreamAsync``1(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module stream. This value must not be <c>null</c> and it must not return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module stream using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStreamAsync``1(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleStream">The module in stream form. This value must not be <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends the stream to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both the stream and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream.</para>
            </remarks>
            <example>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">using (var memoryStream = new MemoryStream())
            using (var streamWriter = new StreamWriter(memoryStream))
            {
                // Write the module to a MemoryStream for demonstration purposes.
                streamWriter.Write("module.exports = (callback, message) =&gt; callback(null, {resultMessage: message});");
                streamWriter.Flush();
                memoryStream.Position = 0;
            
                Result? result = await nodeJSService.InvokeFromStreamAsync&lt;Result&gt;(memoryStream, args: new[] { "success" });
                
                Assert.Equal("success", result?.Message);
            }</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStringAsync``1(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module string. This value must not be <c>null</c> and it must not return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module string using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.InvokeFromStringAsync``1(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleString">The module in string form. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends <paramref name="moduleString" /> to NodeJS where it's compiled it for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both <paramref name="moduleString" /> and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending <paramref name="moduleString" />.</para>
            </remarks>
            <example>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">Result? result = await nodeJSService.InvokeFromStringAsync&lt;Result&gt;("module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });", 
                args: new[] { "success" });
            
            Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSPoolService.MoveToNewProcessAsync">
            <summary>Moves subsequent invocations to a new NodeJS process.</summary>
            <returns>The <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
            <remarks>
                <para>This method exposes the system used by file watching (see <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" />) and process retries 
            (see <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumProcessRetries" />) to move to new processes.</para>
                <para>When is access to this system useful? Consider the situation where your application uses file watching.
            If your application knows when files change (e.g. your application is the actor changing files) you can manually invoke this method instead of using file 
            watching. This enables you to avoid the overhead of file watching.</para>
                <para>You do not need to await this method. Subsequent invocations are wait asynchronously until the new process is ready.</para>
                <para>The method respects <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.GracefulProcessShutdown" />.</para>
            </remarks>
        </member>
        <member name="T:Jering.Javascript.NodeJS.HttpNodeJSService">
            <summary>
                <para>An implementation of <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService" /> that uses Http for inter-process communication.</para>
                <para>NodeJS child processes start Http servers to receive invocation requests over Http.</para>
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.HttpNodeJSService._sharedConnectionEstablishedMessageRegex">
            <summary>
            Regex to match message used to perform a handshake with the NodeJS process.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.HttpNodeJSService.ConnectionEstablishedMessageRegex">
            <summary>
                <para>This regex is used to determine successful initialization of the process.</para>
                <para>All match groups contained in the regex are passed as arguments to the <see cref="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.OnConnectionEstablishedMessageReceived(System.Text.RegularExpressions.Match)" /> method.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSService.#ctor(Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions},Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.HttpNodeJSServiceOptions},Jering.Javascript.NodeJS.IHttpContentFactory,Jering.Javascript.NodeJS.IEmbeddedResourcesService,Jering.Javascript.NodeJS.IFileWatcherService,Jering.Javascript.NodeJS.ITaskService,Jering.Javascript.NodeJS.IBlockDrainerService,Jering.Javascript.NodeJS.IHttpClientService,Jering.Javascript.NodeJS.IJsonService,Jering.Javascript.NodeJS.INodeJSProcessFactory,Microsoft.Extensions.Logging.ILogger{Jering.Javascript.NodeJS.HttpNodeJSService})">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.HttpNodeJSService" />.
            </summary>
            <param name="outOfProcessNodeJSServiceOptionsAccessor">The <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions" /> accessor.</param>
            <param name="httpNodeJSServiceOptionsAccessor">The <see cref="T:Jering.Javascript.NodeJS.HttpNodeJSServiceOptions" /> accessor.</param>
            <param name="httpContentFactory">The factory for creating <see cref="T:System.Net.Http.HttpContent" />s.</param>
            <param name="embeddedResourcesService">The service for retrieving NodeJS Http server scripts.</param>
            <param name="fileWatcherService">The service for watching files.</param>
            <param name="taskService">The service for utilizing tasks.</param>
            <param name="blockDrainerService">The service for draining code blocks.</param>
            <param name="httpClientService">The service for utilizing <see cref="T:System.Net.Http.HttpClient" />.</param>
            <param name="jsonService">The service for JSON serialization and deserialization.</param>
            <param name="nodeJSProcessFactory">The factory for creating <see cref="T:Jering.Javascript.NodeJS.NodeJSProcess" />s.</param>
            <param name="logger">The logger for the instance.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSService.TryInvokeAsync``1(Jering.Javascript.NodeJS.InvocationRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously invokes code in the NodeJS instance.
            </summary>
            <typeparam name="T">The type of the object this method will return. It can be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="invocationRequest">The invocation request to send to the NodeJS process.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the invocation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSService.OnConnectionEstablishedMessageReceived(System.Text.RegularExpressions.Match)">
            <summary>
                <para>This method is called when the connection established message from the NodeJS process is received.</para>
                <para>The message can be used to complete the handshake with the
            NodeJS process, for example by delivering a port and an IP address to use in further communications.</para>
            </summary>
            <param name="connectionMessageMatch">The regex match that can be used to extract additional arguments to complete the handshake.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.HttpNodeJSService.Dispose(System.Boolean)">
            <summary>
            Disposes the instance. This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.
            </summary>
            <param name="disposing">True if the object is disposing or false if it is finalizing.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.HttpNodeJSServiceOptions">
            <summary>
            Options for <see cref="T:Jering.Javascript.NodeJS.HttpNodeJSService" />s.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IHttpClientService">
            <summary>
            An abstraction for utilizing HTTP.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.IHttpClientService.Timeout">
            <summary>
            Gets or sets the timespan to wait before the request times out.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IHttpClientService.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
            Send an HTTP request as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send.</param>
            <param name="completionOption">When the operation should complete (as soon as a response is available or after reading the whole response content).</param>
            <param name="cancellationToken">The cancellation token to cancel operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">The request was null.</exception>
            <exception cref="T:System.InvalidOperationException">The request message was already sent by the System.Net.Http.HttpClient instance.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</exception>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IHttpContentFactory">
            <summary>
                <para>An abstraction for <see cref="T:System.Net.Http.HttpContent" /> creation.</para>
                <para>To use a custom <see cref="T:System.Net.Http.HttpContent" /> implementation, implement this interface and overwrite the default DI service for <see cref="T:Jering.Javascript.NodeJS.IHttpContentFactory" />.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IHttpContentFactory.Create(Jering.Javascript.NodeJS.InvocationRequest)">
            <summary>
            Creates an instance of a <see cref="T:System.Net.Http.HttpContent" /> implementation.
            </summary>
            <param name="invocationRequest">The invocation request to transmit over Http.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.InvocationContent">
            <summary>
                <para>An implementation of <see cref="T:System.Net.Http.HttpContent" /> that serializes an <see cref="T:Jering.Javascript.NodeJS.InvocationRequest" /> to a <see cref="T:System.IO.Stream" />.</para>
                <para>Serializion is handled differently if <see cref="P:Jering.Javascript.NodeJS.InvocationRequest.ModuleStreamSource" /> is specified since a stream cannot be efficiently serialized to JSON. 
            <see cref="T:Jering.Javascript.NodeJS.InvocationContent" /> creates a request with Content-Type multipart/mixed and sends the stream as a separate part.
            </para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationContent.#ctor(Jering.Javascript.NodeJS.IJsonService,Jering.Javascript.NodeJS.InvocationRequest)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationContent" />.
            </summary>
            <param name="jsonService">The service for serializing data to JSON.</param>
            <param name="invocationRequest">The invocation request to transmit over Http.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            Serialize the HTTP content to a stream as an asynchronous operation.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="context">Information about the transport (channel binding token, for example). This parameter may be <c>null</c>.</param>
            <returns>The task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationContent.TryComputeLength(System.Int64@)">
            <summary>
            Determines whether the HTTP content has a valid length in bytes.
            </summary>
            <param name="length">The length in bytes of the HTTP content.</param>
            <returns>true if length is a valid length; otherwise, false.</returns>
        </member>
        <member name="T:Jering.Javascript.NodeJS.InvocationContentFactory">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IHttpContentFactory" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationContentFactory.#ctor(Jering.Javascript.NodeJS.IJsonService)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.InvocationContentFactory" />.
            </summary>
            <param name="jsonService">The service for serializing and deserializing JSON.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.InvocationContentFactory.Create(Jering.Javascript.NodeJS.InvocationRequest)">
            <summary>
            Creates an instance of a <see cref="T:System.Net.Http.HttpContent" /> implementation.
            </summary>
            <param name="invocationRequest">The invocation request to transmit over Http.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.INodeJSProcess">
            <summary>
                <para>A thread-safe abstraction for a NodeJS process.</para>
                <para>This abstraction exists for these reasons:</para>
                <list type="bullet">
                    <item>Accessing properties of disposed process objects causes exceptions. For example, after calling MyProcess.Dispose(), 
            calling MyProcess.HasExited throws an InvalidOperationException. This abstraction prevents such exceptions by tracking
            the disposed status of the process in a thread safe manner.</item>
                    <item>NodeJS processes have an extra state: connected. This abstraction wraps the state together with the process.</item>
                    <item>This abstraction allows for more simpler and more thorough tests through mocking.</item>
                </list>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.AddOutputReceivedHandler(Jering.Javascript.NodeJS.MessageReceivedEventHandler)">
            <summary>
                <para>Adds a handler for output messages.</para>
                <para>The added handler is more convenient than what you'd add with <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddOutputDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)" />:
            when the NodeJS process writes to stdout, the <see cref="T:System.Diagnostics.DataReceivedEventHandler" /> fires once for each line written.
            The handler added by this method fires only when a complete message has been built. This way subscribers don't need to manually build messages.</para>
                <para>This method is not thread-safe.</para>
            </summary>
            <param name="messageReceivedHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.AddErrorReceivedHandler(Jering.Javascript.NodeJS.MessageReceivedEventHandler)">
            <summary>
                <para>Adds a handler for error messages.</para>
                <para>The added handler is more convenient than what you'd add with <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddErrorDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)" />:
            when the NodeJS process writes to stderr, the <see cref="T:System.Diagnostics.DataReceivedEventHandler" /> fires once for each line written.
            The handler added by this method fires only when a complete message has been built. This way subscribers don't need to manually build messages.</para>
                <para>This method is not thread-safe.</para>
            </summary>
            <param name="messageReceivedHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.BeginOutputAndErrorReading">
            <summary>
            Begins reading of stdout and stderr using standalone threads.
            </summary>
            <remarks>
                <para>You must register at least one <see cref="T:Jering.Javascript.NodeJS.MessageReceivedEventHandler" /> for each of <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddOutputDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)" />
            and <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddErrorReceivedHandler(Jering.Javascript.NodeJS.MessageReceivedEventHandler)" /> before calling this method.</para>
                <para>Read content is passed to the registered <see cref="T:Jering.Javascript.NodeJS.MessageReceivedEventHandler" />s.</para>
                <para>If <see cref="T:Jering.Javascript.NodeJS.MessageReceivedEventHandler" /> are missing, the standalone threads will throw <see cref="T:System.NullReferenceException" />s.</para>
                <para>Use this method over <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.BeginOutputReadLine" /> and <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.BeginErrorReadLine" />. Both of those methods require ThreadPool threads to read.
            This means that if ThreadPool threads are limited in number, it will take some time for reads to start.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.AddOutputDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)">
            <summary>
            Adds a <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> handler to the NodeJS process.
            </summary>
            <param name="dataReceivedEventHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.AddErrorDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)">
            <summary>
            Adds a <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> handler to the NodeJS process.
            </summary>
            <param name="dataReceivedEventHandler">The handler to add.</param>
        </member>
        <member name="P:Jering.Javascript.NodeJS.INodeJSProcess.Connected">
            <summary>
            Gets the value indicating whether the NodeJS process is connected.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.INodeJSProcess.HasExited">
            <summary>
            Gets the value indicating whether the NodeJS process has exited.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.INodeJSProcess.ExitStatus">
            <summary>
                <para>Gets the string describing the NodeJS process's exit status.</para>
                <para>If the process has not exited, returns "Process has not exited".</para>
                <para>If the process has been disposed, returns "Process has been disposed".</para>
                <para>If the process has exit but has not been disposed, returns its exit code.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.INodeJSProcess.SafeID">
            <summary>
                <para>Gets the NodeJS process's ID.</para>
                <para>If the ID can't be retrieved, returns -1.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.SetConnected">
            <summary>
            Sets the NodeJS process's connected state to true.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.BeginErrorReadLine">
            <summary>
            Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of the application.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.BeginOutputReadLine">
            <summary>
            Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of the application.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcess.Kill">
            <summary>
            Kills the underlying NodeJS process.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.INodeJSProcessFactory">
            <summary>
                <para>An abstraction for NodeJS process creation.</para>
                <para>To customize process creation, implement this interface and overwrite the default DI service for <see cref="T:Jering.Javascript.NodeJS.INodeJSProcessFactory" />.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcessFactory.Create(System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.INodeJSProcess" /> running <paramref name="serverScript" />.
            </summary>
            <param name="serverScript">The server script to run on NodeJS.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.INodeJSProcessFactory.Create(System.String,System.EventHandler)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.INodeJSProcess" /> running <paramref name="serverScript" /> with exited event handle <paramref name="exitedEventHandler" />.
            </summary>
            <param name="serverScript">The server script to run on NodeJS.</param>
            <param name="exitedEventHandler">The NodeJS process's exited event handler.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.MessageReceivedEventHandler">
            <summary>
                <para>Represents the method that will handle the message received event of a process.</para>
                <para>This method is a convenience-alternative to <see cref="T:System.Diagnostics.DataReceivedEventHandler" /> which handles each line of a message.</para>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.NodeJSProcess">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.INodeJSProcess" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.#ctor(System.Diagnostics.Process)">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.NodeJSProcess" />.
            </summary>
            <param name="process">The NodeJS process.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="process" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="process" /> has exited.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="process" /> has not started or has been disposed of.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.BeginOutputAndErrorReading">
            <summary>
            Begins reading of stdout and stderr using standalone threads.
            </summary>
            <remarks>
                <para>You must register at least one <see cref="T:Jering.Javascript.NodeJS.MessageReceivedEventHandler" /> for each of <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddOutputDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)" />
            and <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddErrorReceivedHandler(Jering.Javascript.NodeJS.MessageReceivedEventHandler)" /> before calling this method.</para>
                <para>Read content is passed to the registered <see cref="T:Jering.Javascript.NodeJS.MessageReceivedEventHandler" />s.</para>
                <para>If <see cref="T:Jering.Javascript.NodeJS.MessageReceivedEventHandler" /> are missing, the standalone threads will throw <see cref="T:System.NullReferenceException" />s.</para>
                <para>Use this method over <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.BeginOutputReadLine" /> and <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.BeginErrorReadLine" />. Both of those methods require ThreadPool threads to read.
            This means that if ThreadPool threads are limited in number, it will take some time for reads to start.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.AddOutputReceivedHandler(Jering.Javascript.NodeJS.MessageReceivedEventHandler)">
            <summary>
                <para>Adds a handler for output messages.</para>
                <para>The added handler is more convenient than what you'd add with <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddOutputDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)" />:
            when the NodeJS process writes to stdout, the <see cref="T:System.Diagnostics.DataReceivedEventHandler" /> fires once for each line written.
            The handler added by this method fires only when a complete message has been built. This way subscribers don't need to manually build messages.</para>
                <para>This method is not thread-safe.</para>
            </summary>
            <param name="messageReceivedHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.AddErrorReceivedHandler(Jering.Javascript.NodeJS.MessageReceivedEventHandler)">
            <summary>
                <para>Adds a handler for error messages.</para>
                <para>The added handler is more convenient than what you'd add with <see cref="M:Jering.Javascript.NodeJS.INodeJSProcess.AddErrorDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)" />:
            when the NodeJS process writes to stderr, the <see cref="T:System.Diagnostics.DataReceivedEventHandler" /> fires once for each line written.
            The handler added by this method fires only when a complete message has been built. This way subscribers don't need to manually build messages.</para>
                <para>This method is not thread-safe.</para>
            </summary>
            <param name="messageReceivedHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.AddOutputDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)">
            <summary>
            Adds a <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> handler to the NodeJS process.
            </summary>
            <param name="dataReceivedEventHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.AddErrorDataReceivedHandler(System.Diagnostics.DataReceivedEventHandler)">
            <summary>
            Adds a <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> handler to the NodeJS process.
            </summary>
            <param name="dataReceivedEventHandler">The handler to add.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.BeginOutputReadLine">
            <summary>
            Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of the application.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.BeginErrorReadLine">
            <summary>
            Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of the application.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.SetConnected">
            <summary>
            Sets the NodeJS process's connected state to true.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcess.ExitStatus">
            <summary>
                <para>Gets the string describing the NodeJS process's exit status.</para>
                <para>If the process has not exited, returns "Process has not exited".</para>
                <para>If the process has been disposed, returns "Process has been disposed".</para>
                <para>If the process has exit but has not been disposed, returns its exit code.</para>
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcess.HasExited">
            <summary>
            Gets the value indicating whether the NodeJS process has exited.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcess.Connected">
            <summary>
            Gets the value indicating whether the NodeJS process is connected.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.Kill">
            <summary>
            Kills the underlying NodeJS process.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcess.SafeID">
            <summary>
                <para>Gets the NodeJS process's ID.</para>
                <para>If the ID can't be retrieved, returns -1.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.Dispose">
            <summary>
            Kills and disposes of the NodeJS process.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcess.Dispose(System.Boolean)">
            <summary>
            Kills and disposes of the NodeJS process.
            </summary>
            <remarks>This method is thread-safe.</remarks>
        </member>
        <member name="T:Jering.Javascript.NodeJS.NodeJSProcessFactory">
            <summary>
            The default <see cref="T:Jering.Javascript.NodeJS.INodeJSProcessFactory" /> implementation.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcessFactory.#ctor(Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.NodeJSProcessOptions})">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.NodeJSProcessFactory" />.
            </summary>
            <param name="optionsAccessor">The <see cref="T:Jering.Javascript.NodeJS.NodeJSProcessOptions" /> accessor.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcessFactory.Create(System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.INodeJSProcess" /> running <paramref name="serverScript" />.
            </summary>
            <param name="serverScript">The server script to run on NodeJS.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.NodeJSProcessFactory.Create(System.String,System.EventHandler)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.INodeJSProcess" /> running <paramref name="serverScript" /> with exited event handle <paramref name="exitedEventHandler" />.
            </summary>
            <param name="serverScript">The server script to run on NodeJS.</param>
            <param name="exitedEventHandler">The NodeJS process's exited event handler.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.NodeJSProcessOptions">
            <summary>
            Options for a NodeJS process.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath">
            <summary>The base path for resolving NodeJS module paths.</summary>
            <remarks>
                <para>If this value is <c>null</c>, whitespace or an empty string and the application is an ASP.NET Core application, 
            project path is <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.ContentRootPath" />.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ExecutablePath">
            <summary>The value used to locate the NodeJS executable.</summary>
            <remarks>
                <para>This value may be an absolute path, a relative path, or a file name.</para>
                <para>If this value is a relative path, the executable's path is resolved relative to <see cref="M:System.IO.Directory.GetCurrentDirectory" />.</para>
                <para>If this value is a file name, the executable's path is resolved using the path environment variable.</para>
                <para>If this value is <c>null</c>, whitespace or an empty string, it is overridden with the file name "node".</para>
                <para>Defaults to <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.NodeAndV8Options">
            <summary>NodeJS and V8 options in the form &lt;NodeJS options&gt; &lt;V8 options&gt;.</summary>
            <remarks>
                <para>You can find the full list of NodeJS options <a href="https://nodejs.org/api/cli.html#cli_options">here</a>.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.Port">
            <summary>The NodeJS server will listen on this port.</summary>
            <remarks>
                <para>If this value is 0, the OS will choose the port.</para>
                <para>Defaults to 0.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.EnvironmentVariables">
            <summary>The NodeJS process's environment variables.</summary>
            <remarks>
                <para>You can configure NodeJS by specifying environment variables for it. Find the full list of environment variables <a href="https://nodejs.org/api/cli.html#cli_environment_variables">here</a>.</para>
                <para>If this value doesn't contain an element with key "NODE_ENV" and the application is an ASP.NET Core application,
            an element with key "NODE_ENV" is added. The added element's value is "development" if <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" /> is <see cref="F:Microsoft.Extensions.Hosting.Environments.Development" />,
            and "production" otherwise.</para>
            </remarks>
        </member>
        <member name="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService">
            <summary>
                <para>An abstract <see cref="T:Jering.Javascript.NodeJS.INodeJSService" /> implementation that facilitates working with an out of process NodeJS instance.</para>
                <para>The primary responsibilities of this class are launching and maintaining a NodeJS process.
            This class uses the stdout stream of the child process to perform a simple handshake with the NodeJS process. This is agnostic to the mechanism that
            derived classes use to actually perform the invocations (e.g., they could use HTTP-RPC, or a binary TCP protocol, or any other RPC-type mechanism).</para>
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.Logger">
            <summary>
            The logger for the NodeJS process's stdout and stderr streams as well as messages from <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService" /> and its implementations.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.ConnectionEstablishedMessageRegex">
            <summary>
                <para>This regex is used to determine successful initialization of the process.</para>
                <para>All match groups contained in the regex are passed as arguments to the <see cref="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.OnConnectionEstablishedMessageReceived(System.Text.RegularExpressions.Match)" /> method.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.#ctor(Jering.Javascript.NodeJS.INodeJSProcessFactory,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions},Jering.Javascript.NodeJS.IEmbeddedResourcesService,Jering.Javascript.NodeJS.IFileWatcherService,Jering.Javascript.NodeJS.ITaskService,Jering.Javascript.NodeJS.IBlockDrainerService,System.Reflection.Assembly,System.String)">
            <summary>
            Creates an <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService" /> instance.
            </summary>
            <param name="nodeProcessFactory">
            </param>
            <param name="logger">
            </param>
            <param name="optionsAccessor">
            </param>
            <param name="embeddedResourcesService">
            </param>
            <param name="fileWatcherService">
            </param>
            <param name="taskService">
            </param>
            <param name="blockDrainerService">
            </param>
            <param name="serverScriptAssembly">
            </param>
            <param name="serverScriptName">
            </param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.TryInvokeAsync``1(Jering.Javascript.NodeJS.InvocationRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously invokes code in the NodeJS instance.
            </summary>
            <typeparam name="T">The type of the object this method will return. It can be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="invocationRequest">The invocation request to send to the NodeJS process.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the invocation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.OnConnectionEstablishedMessageReceived(System.Text.RegularExpressions.Match)">
            <summary>
                <para>This method is called when the connection established message from the NodeJS process is received.</para>
                <para>The message can be used to complete the handshake with the
            NodeJS process, for example by delivering a port and an IP address to use in further communications.</para>
            </summary>
            <param name="connectionMessageMatch">The regex match that can be used to extract additional arguments to complete the handshake.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromFileAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module on disk.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>To avoid rereads and recompilations on subsequent invocations, NodeJS caches the module using the its absolute path as cache identifier.</para>
            </remarks>
            <example>
            If we have a file named exampleModule.js (located in <c>NodeJSProcessOptions.ProjectPath</c>), with contents:
            <code language="javascript">module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });</code>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">Result? result = await nodeJSService.InvokeFromFileAsync&lt;Result&gt;("exampleModule.js", args: new[] { "success" });
            
            Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromFileAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module on disk.</summary>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>To avoid rereads and recompilations on subsequent invocations, NodeJS caches the module using the its absolute path as cache identifier. </para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStringAsync``1(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleString">The module in string form. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends <paramref name="moduleString" /> to NodeJS where it's compiled it for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both <paramref name="moduleString" /> and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending <paramref name="moduleString" />.</para>
            </remarks>
            <example>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">Result? result = await nodeJSService.InvokeFromStringAsync&lt;Result&gt;("module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });", 
                args: new[] { "success" });
            
            Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStringAsync(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <param name="moduleString">The module in string form. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends <paramref name="moduleString" /> to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both <paramref name="moduleString" /> and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending <paramref name="moduleString" />.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStringAsync``1(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module string. This value must not be <c>null</c> and it must not return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module string using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStringAsync(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <param name="moduleFactory">The factory that creates the module string. This value must not be <c>null</c> and it must not return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module string using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStreamAsync``1(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleStream">The module in stream form. This value must not be <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends the stream to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both the stream and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream.</para>
            </remarks>
            <example>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">using (var memoryStream = new MemoryStream())
            using (var streamWriter = new StreamWriter(memoryStream))
            {
                // Write the module to a MemoryStream for demonstration purposes.
                streamWriter.Write("module.exports = (callback, message) =&gt; callback(null, {resultMessage: message});");
                streamWriter.Flush();
                memoryStream.Position = 0;
            
                Result? result = await nodeJSService.InvokeFromStreamAsync&lt;Result&gt;(memoryStream, args: new[] { "success" });
                
                Assert.Equal("success", result?.Message);
            }</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStreamAsync(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <param name="moduleStream">The module in stream form. This value must not be <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends the stream to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both the stream and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.INodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStreamAsync``1(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module stream. This value must not be <c>null</c> and it must not return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module stream using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.InvokeFromStreamAsync(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <param name="moduleFactory">The factory that creates the module stream. This value must not be <c>null</c> and it must not return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module stream using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Attempts to invoke a function from a module in NodeJS's cache.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns a (bool, T) with the bool set to true on 
             success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <example>
             Using the class <c>Result</c>:
             <code language="csharp">public class Result
             {
                 public string? Message { get; set; }
             }</code>
             The following assertion will pass:
             <code language="csharp">// Cache the module
             string cacheIdentifier = "exampleModule";
             await nodeJSService.InvokeFromStringAsync&lt;Result&gt;("module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });", 
                 cacheIdentifier,
                 args: new[] { "success" });
            
             // Invoke from cache
             (bool success, Result? result) = await nodeJSService.TryInvokeFromCacheAsync&lt;Result&gt;(cacheIdentifier, args: new[] { "success" });
            
             Assert.True(success);
             Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.TryInvokeFromCacheAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Attempts to invoke a function from a module in NodeJS's cache.</summary>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns true on success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.MoveToNewProcessAsync">
            <summary>Moves subsequent invocations to a new NodeJS process.</summary>
            <returns>The <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
            <remarks>
                <para>This method exposes the system used by file watching (see <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" />) and process retries 
            (see <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumProcessRetries" />) to move to new processes.</para>
                <para>When is access to this system useful? Consider the situation where your application uses file watching.
            If your application knows when files change (e.g. your application is the actor changing files) you can manually invoke this method instead of using file 
            watching. This enables you to avoid the overhead of file watching.</para>
                <para>You do not need to await this method. Subsequent invocations are wait asynchronously until the new process is ready.</para>
                <para>The method respects <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.GracefulProcessShutdown" />.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.CreateNewProcessAndConnectAsync">
            <summary>
            Caller must hold <see cref="F:Jering.Javascript.NodeJS.OutOfProcessNodeJSService._connectingLock" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.Dispose">
            <summary>
            Disposes this instance. This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.OutOfProcessNodeJSService.Dispose(System.Boolean)">
            <summary>
            Disposes the instance. This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.
            </summary>
            <param name="disposing">True if the object is disposing or false if it is finalizing.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions">
            <summary>
            Options for an <see cref="T:Jering.Javascript.NodeJS.OutOfProcessNodeJSService" />.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.ConnectionTimeoutMS">
            <summary>The maximum duration to wait for the NodeJS process to connect.</summary>
            <remarks>
                <para>If this value is negative, the maximum duration is infinite.</para>
                <para>Defaults to <c>5000</c>.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.InvocationTimeoutMS">
            <summary>The maximum duration to wait for responses to invocations.</summary>
            <remarks>
                <para>If this value is negative, the maximum duration is infinite.</para>
                <para>Defaults to <c>100,000</c>.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumRetries">
            <summary>The number of times a NodeJS process retries an invocation.</summary>
            <remarks>
                <para>If this value is negative, invocations are retried indefinitely.</para>
                <para>If an invocation's module source is an unseekable stream, the invocation is not retried.
            If you require retries for such streams, copy their contents to a <see cref="T:System.IO.MemoryStream" />.</para>
                <para>Defaults to 1.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumProcessRetries">
            <summary>The number of NodeJS processes created to retry an invocation.</summary>
            <remarks>
                <para>A NodeJS process retries invocations <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumRetries" /> times. Once a process's retries are exhausted,
            if any <b>retry-processes</b> remain, the library creates a new process and retries invocations <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumRetries" /> times.</para>
                <para>For example, consider the situation where <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumRetries" /> and this value are both 1. The existing process first attempts the invocation.
            If it fails, it retries the invocation once. If it fails again, the library creates a new process that retries the invocation once. In total, the library
            attempts the invocation 3 times.</para>
                <para>If this value is negative, the library creates new NodeJS processes indefinitely.</para>
                <para>If this value is larger than 0 and <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumRetries" /> is 0, the invocation is retried once in each new process.</para>
                <para>By default, process retries are disabled for invocation failures caused by javascript errors. See <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableProcessRetriesForJavascriptErrors" /> for more information.</para>
                <para>If the module source of an invocation is an unseekable stream, the invocation is not retried.
            If you require retries for such streams, copy their contents to a <see cref="T:System.IO.MemoryStream" />.</para>
                <para>Defaults to 1.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableProcessRetriesForJavascriptErrors">
            <summary>Whether invocation failures caused by Javascript errors are retried in new processes.</summary>
            <remarks>
                <para>Process retries were introduced to deal with process-level issues. For example, when a NodeJS process becomes unresponsive the only solution is to start a new process.</para>
                <para>If this value is <c>true</c>, process retries also occur on Javascript errors. If it is <c>false</c>, they only occur for process-level issues.</para>
                <para>Defaults to <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumConnectionRetries">
            <summary>Number of times the library retries NodeJS connection attempts.</summary>
            <remarks>
                <para>If this value is negative, connection attempts are retried indefinitely.</para>
                <para>Defaults to 2.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.Concurrency">
            <summary>The concurrency mode for invocations.</summary>
            <remarks>
                <para>By default, this value is <see cref="F:Jering.Javascript.NodeJS.Concurrency.None" />. In this mode, a single NodeJS process executes invocations synchronously. 
            This mode has the benefit of lower memory overhead and it supports all modules. However, it is less performant.</para>
                <para>If this value is <see cref="F:Jering.Javascript.NodeJS.Concurrency.MultiProcess" />, <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.ConcurrencyDegree" /> NodeJS processes are created and invocations are
            distributed among them using round robin load balancing. This mode is more performant. However, it has higher memory overhead and doesn't work with modules that 
            have persistent state.</para>
                <para>Defaults to <see cref="F:Jering.Javascript.NodeJS.Concurrency.None" />.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.ConcurrencyDegree">
            <summary>The concurrency degree.</summary>
            <remarks>
                <para>If <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.Concurrency" /> is <see cref="F:Jering.Javascript.NodeJS.Concurrency.MultiProcess" />, this value is the number of NodeJS processes.</para>
                <para>If this value is less than or equal to 0, concurrency degree is the number of logical processors the current machine has.</para>
                <para>This value does nothing if <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.Concurrency" /> is <see cref="F:Jering.Javascript.NodeJS.Concurrency.None" />.</para>
                <para>Defaults to 0.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching">
            <summary>The value specifying whether file watching is enabled.</summary>
            <remarks>
                <para>If file watching is enabled, the library watches files in <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchPath" /> with file name matching a pattern in <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchFileNamePatterns" />. 
            The library restarts NodeJS when a watched file changes.</para>
                <para>Works with all <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.Concurrency" /> modes.</para>
                <para>Defaults to <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchPath">
            <summary>The directory to watch for file changes.</summary>
            <remarks>
                <para>If this value is <c>null</c>, the path <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" /> is watched.</para>
                <para>This value does nothing if <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" /> is <c>false</c>.</para>
                <para>Defaults to <c>null</c></para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchSubdirectories">
            <summary>The value specifying whether subdirectories of <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchPath" /> are watched.</summary>
            <remarks>
                <para>This value does nothing if <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" /> is <c>false</c>.</para>
                <para>Defaults to <c>true</c>.</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.WatchFileNamePatterns">
            <summary>The file name patterns to watch.</summary>
            <remarks>
                <para>In a pattern, "*" represents 0 or more of any character and "?" represents 0 or 1 of any character. For example,
            "TestFile1.js" matches the pattern "*File?.js".</para>
                <para>This value does nothing if <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" /> is <c>false</c>.</para>
                <para>Defaults to "*.js", "*.jsx", "*.ts", "*.tsx", "*.json" and "*.html".</para>
            </remarks>
        </member>
        <member name="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.GracefulProcessShutdown">
            <summary>The value specifying whether NodeJS processes shutdown gracefully when moving to a new process.</summary>
            <remarks>
                <para>If this value is true, NodeJS processes shutdown gracefully. Otherwise they're killed immediately.</para>
                <para>What's a graceful shutdown? When the library creates a new NodeJS process, the old NodeJS process
            might still be handling earlier invocations. If graceful shutdown is enabled, the old NodeJS process is killed <b>after</b> its
            invocations complete. If graceful shutdown is disabled, the old NodeJS process is killed immediately and existing
            invocations are retried in the new NodeJS process (assuming they have remaining retries, see <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumRetries" />).</para>
                <para>Should I use graceful shutdown? Shutting down gracefully is safer: chances of an invocation exhausting retries and failing is lower, also,
            you won't face issues from an invocation terminating midway. However, graceful shutdown does incur a small performance cost.
            Also, invocations complete using the outdated version of your script. Weigh these factors for your script and use-case to decide whether to use graceful shutdown.</para>
                <para>This value does nothing if <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" /> is <c>false</c> and <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumProcessRetries" /> is 0.</para>
                <para>Defaults to <c>true</c>.</para>
            </remarks>
        </member>
        <member name="T:Jering.Javascript.NodeJS.Void">
            <summary>
            Represents non-existence.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.StaticNodeJSService">
            <summary>
            A class that provides static access to an instance of the default <see cref="T:Jering.Javascript.NodeJS.INodeJSService" /> implementation's public methods.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.DisposeServiceProvider">
            <summary>
                <para>Disposes the underlying <see cref="T:System.IServiceProvider" /> used to resolve <see cref="T:Jering.Javascript.NodeJS.INodeJSService" />.</para>
                <para>This method is not thread safe.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.Configure``1(System.Action{``0})">
            <summary>
                <para>Configures options.</para>
                <para>This method is not thread safe.</para>
            </summary>
            <typeparam name="T">The type of options to configure.</typeparam>
            <param name="configureOptions">The action that configures the options.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.SetServices(Microsoft.Extensions.DependencyInjection.ServiceCollection)">
            <summary>
                <para>Sets the <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection" /> used to create an <see cref="T:Jering.Javascript.NodeJS.INodeJSService" />.</para>
                <para>This method is not thread safe.</para>
            </summary>
            <param name="services">
                <para>The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection" /> used to create an <see cref="T:Jering.Javascript.NodeJS.INodeJSService" />.</para>
                <para>If this value doesn't contain a valid service for <see cref="T:Jering.Javascript.NodeJS.INodeJSService" />, <see cref="T:System.InvalidOperationException" />s are
            thrown on subsequent invocations.</para>
            </param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromFileAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module on disk.</summary>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>To avoid rereads and recompilations on subsequent invocations, NodeJS caches the module using the its absolute path as cache identifier. </para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStreamAsync(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <param name="moduleFactory">The factory that creates the module stream. This value must not be <c>null</c> and it must not return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module stream using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStreamAsync(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <param name="moduleStream">The module in stream form. This value must not be <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends the stream to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both the stream and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStringAsync(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <param name="moduleFactory">The factory that creates the module string. This value must not be <c>null</c> and it must not return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module string using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStringAsync(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <param name="moduleString">The module in string form. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends <paramref name="moduleString" /> to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both <paramref name="moduleString" /> and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending <paramref name="moduleString" />.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Attempts to invoke a function from a module in NodeJS's cache.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns a (bool, T) with the bool set to true on 
             success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <example>
             Using the class <c>Result</c>:
             <code language="csharp">public class Result
             {
                 public string? Message { get; set; }
             }</code>
             The following assertion will pass:
             <code language="csharp">// Cache the module
             string cacheIdentifier = "exampleModule";
             await nodeJSService.InvokeFromStringAsync&lt;Result&gt;("module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });", 
                 cacheIdentifier,
                 args: new[] { "success" });
            
             // Invoke from cache
             (bool success, Result? result) = await nodeJSService.TryInvokeFromCacheAsync&lt;Result&gt;(cacheIdentifier, args: new[] { "success" });
            
             Assert.True(success);
             Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Attempts to invoke a function from a module in NodeJS's cache.</summary>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. On completion, the task returns true on success and false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromFileAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module on disk.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="modulePath">The path to the module relative to <see cref="P:Jering.Javascript.NodeJS.NodeJSProcessOptions.ProjectPath" />. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="modulePath" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>To avoid rereads and recompilations on subsequent invocations, NodeJS caches the module using the its absolute path as cache identifier.</para>
            </remarks>
            <example>
            If we have a file named exampleModule.js (located in <c>NodeJSProcessOptions.ProjectPath</c>), with contents:
            <code language="javascript">module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });</code>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">Result? result = await nodeJSService.InvokeFromFileAsync&lt;Result&gt;("exampleModule.js", args: new[] { "success" });
            
            Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStreamAsync``1(System.Func{System.IO.Stream},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module stream. This value must not be <c>null</c> and it must not return <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module stream using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStreamAsync``1(System.IO.Stream,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in stream form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleStream">The module in stream form. This value must not be <c>null</c>.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleStream" /> is <c>null</c>.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends the stream to NodeJS where it's compiled for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both the stream and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending the module stream.</para>
            </remarks>
            <example>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">using (var memoryStream = new MemoryStream())
            using (var streamWriter = new StreamWriter(memoryStream))
            {
                // Write the module to a MemoryStream for demonstration purposes.
                streamWriter.Write("module.exports = (callback, message) =&gt; callback(null, {resultMessage: message});");
                streamWriter.Flush();
                memoryStream.Position = 0;
            
                Result? result = await nodeJSService.InvokeFromStreamAsync&lt;Result&gt;(memoryStream, args: new[] { "success" });
                
                Assert.Equal("success", result?.Message);
            }</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStringAsync``1(System.Func{System.String},System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleFactory">The factory that creates the module string. This value must not be <c>null</c> and it must not return <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. This value must not be <c>null</c>.</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if module is not cached but <paramref name="moduleFactory" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cacheIdentifier" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleFactory" /> returns <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>Initially, sends only <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it informs the .NET process that the module isn't cached. 
            The .NET process then creates the module string using <paramref name="moduleFactory" /> and send it to NodeJS where it's compiled, invoked and cached.</para>
                <para>If <paramref name="exportName" /> is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked. Otherwise, invokes the function named <paramref name="exportName" /> in <c>module.exports</c>.</para>
            </remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.InvokeFromStringAsync``1(System.String,System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>Invokes a function from a NodeJS module in string form.</summary>
            <typeparam name="T">The type of value returned. This may be a JSON-serializable type, <see cref="T:System.String" />, or <see cref="T:System.IO.Stream" />.</typeparam>
            <param name="moduleString">The module in string form. This value must not be <c>null</c>, whitespace or an empty string.</param>
            <param name="cacheIdentifier">The module's cache identifier. If this value is <c>null</c>, NodeJS ignores its module cache..</param>
            <param name="exportName">The name of the function in <c>module.exports</c> to invoke. If this value is <c>null</c>, <c>module.exports</c> is assumed to be a function and is invoked.</param>
            <param name="args">The sequence of JSON-serializable arguments to pass to the function to invoke. If this value is <c>null</c>, no arguments are passed.</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="moduleString" /> is <c>null</c>, whitespace or an empty string.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.ConnectionException">Thrown if unable to connect to NodeJS.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if the invocation request times out.</exception>
            <exception cref="T:Jering.Javascript.NodeJS.InvocationException">Thrown if a NodeJS error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed or if it attempts to use a disposed dependency.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <remarks>
                <para>If <paramref name="cacheIdentifier" /> is <c>null</c>, sends <paramref name="moduleString" /> to NodeJS where it's compiled it for one-time use.</para>
                <para>If <paramref name="cacheIdentifier" /> isn't <c>null</c>, sends both <paramref name="moduleString" /> and <paramref name="cacheIdentifier" /> to NodeJS. NodeJS reuses the module if it's already cached. Otherwise, it compiles and caches the module.</para>
                <para>Once the module is cached, you may use <see cref="M:Jering.Javascript.NodeJS.StaticNodeJSService.TryInvokeFromCacheAsync``1(System.String,System.String,System.Object[],System.Threading.CancellationToken)" /> to invoke directly from the cache, avoiding the overhead of sending <paramref name="moduleString" />.</para>
            </remarks>
            <example>
            Using the class <c>Result</c>:
            <code language="csharp">public class Result
            {
                public string? Message { get; set; }
            }</code>
            The following assertion will pass:
            <code language="csharp">Result? result = await nodeJSService.InvokeFromStringAsync&lt;Result&gt;("module.exports = (callback, message) =&gt; callback(null, { resultMessage: message });", 
                args: new[] { "success" });
            
            Assert.Equal("success", result?.Message);</code></example>
        </member>
        <member name="M:Jering.Javascript.NodeJS.StaticNodeJSService.MoveToNewProcessAsync">
            <summary>Moves subsequent invocations to a new NodeJS process.</summary>
            <returns>The <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
            <remarks>
                <para>This method exposes the system used by file watching (see <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.EnableFileWatching" />) and process retries 
            (see <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.NumProcessRetries" />) to move to new processes.</para>
                <para>When is access to this system useful? Consider the situation where your application uses file watching.
            If your application knows when files change (e.g. your application is the actor changing files) you can manually invoke this method instead of using file 
            watching. This enables you to avoid the overhead of file watching.</para>
                <para>You do not need to await this method. Subsequent invocations are wait asynchronously until the new process is ready.</para>
                <para>The method respects <see cref="P:Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions.GracefulProcessShutdown" />.</para>
            </remarks>
        </member>
        <member name="T:Jering.Javascript.NodeJS.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_InvocationRequest_ModuleSourceCannotBeNull">
            <summary>
              Looks up a localized string similar to If moduleSourceType is cache, moduleSource cannot be null..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_InvocationRequest_ModuleSourceCannotBeNullWhitespaceOrAnEmptyString">
            <summary>
              Looks up a localized string similar to If moduleSourceType is file or string, moduleSource cannot be null, whitespace or an empty string..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_InvocationRequest_ModuleStreamSourceCannotBeNull">
            <summary>
              Looks up a localized string similar to If moduleSourceType is stream, moduleStreamSource cannot be null..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_NodeJSProcess_ExpectedAStreamReader">
            <summary>
              Looks up a localized string similar to Expected a StreamReader..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_NodeJSProcess_ProcessHasExited">
            <summary>
              Looks up a localized string similar to The process has exited..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_NodeJSProcess_ProcessHasNotBeenStartedOrHasBeenDisposed">
            <summary>
              Looks up a localized string similar to The process has not been started or has been disposed of..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_Shared_ValueCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Value cannot be empty..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ArgumentException_Shared_ValueCannotBeNullWhitespaceOrAnEmptyString">
            <summary>
              Looks up a localized string similar to Value cannot be null, whitespace or an empty string..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ConnectionException_OutOfProcessNodeJSService_ConnectionAttemptTimedOut">
            <summary>
              Looks up a localized string similar to NodeJS connection attempt timed out after {0}ms. ProcessID: {1}. Process exited: {2}. Exit status: {3}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ConnectionException_OutOfProcessNodeJSService_FailedToConnect">
            <summary>
              Looks up a localized string similar to Failed to connect to NodeJS. Refer to the inner exception for details..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.ConnectionException_OutOfProcessNodeJSService_ProcessExitedBeforeConnecting">
            <summary>
              Looks up a localized string similar to Process with ID {0} exited before connecting..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvalidOperationException_BlockDrain_OperationCountBelowMinimum">
            <summary>
              Looks up a localized string similar to Operation count below minimum. This might be because ExitBlock is being called more than once for some EnterBlockAsync invocations. It could also be because DrainBlockAndPreventEntryAsync is being called multiple times without calls to ResetAfterDraining in between..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvalidOperationException_InvocationRequest_StreamIsNull">
            <summary>
              Looks up a localized string similar to Stream is null..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvalidOperationException_InvocationRequest_StreamIsUnseekable">
            <summary>
              Looks up a localized string similar to Stream is unseekable..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvalidOperationException_NodeJSProcessFactory_FailedToStartNodeProcess">
            <summary>
               Looks up a localized string similar to Failed to start Node process. To resolve this:
            
            [1] Ensure that NodeJS is installed and can be found in one of the PATH directories. The current PATH enviroment variable is: {0}. Make sure that the Node executable is in one of those directories, or update your PATH.
            
            [2] Refer to the InnerException for further details..
             </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvalidOperations_EmbeddedResourcesService_NoEmbeddedResourceWithSpecifiedName">
            <summary>
              Looks up a localized string similar to No embedded resource with specified name: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvocationException_HttpNodeJSService_UnexpectedStatusCode">
            <summary>
              Looks up a localized string similar to Received a HTTP response with an unexpected status code: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.InvocationException_OutOfProcessNodeJSService_InvocationTimedOut">
            <summary>
              Looks up a localized string similar to Invocation timed out after {0}ms. You can change the timeout duration by setting {1}.{2}. Do ensure that your NodeJS function invokes its callback (or throws an exception if it is an async function)..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogDebug_FileChangedHandlerInvokedForProcess">
            <summary>
              Looks up a localized string similar to File changed handler invoked for process: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogDebug_InternalFileChangedHandlerCallDebounced">
            <summary>
              Looks up a localized string similar to Internal file changed handler call debounced, file path: "{0}"..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogDebug_InternalFileChangedHandlerCalled">
            <summary>
              Looks up a localized string similar to Internal file changed handler called, file path: "{0}"..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogDebug_OutOfProcessNodeJSService_ReleasingProcessConnectionSemaphore">
            <summary>
              Looks up a localized string similar to Releasing process connection semaphore, processID: {0}, thread ID: {1}, thread is ThreadPool thread : {2}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogDebug_OutOfProcessNodeJSService_StartingFileWatcher">
            <summary>
              Looks up a localized string similar to Starting FileWatcher. Current process: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogDebug_OutOfProcessNodeJSService_StoppingFileWatcher">
            <summary>
              Looks up a localized string similar to Stopping FileWatcher. Current process: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogDebug_OutOfProcessNodeJSService_WaitingOnProcessConnectionSemaphore">
            <summary>
              Looks up a localized string similar to Waiting on process connection semaphore, processID: {0}, thread ID: {1}, thread is ThreadPool thread : {2}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogInformation_ConnectedToNodeJSProcess">
            <summary>
              Looks up a localized string similar to Connected to NodeJS process: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogInformation_FileChangedMovingtoNewNodeJSProcess">
            <summary>
              Looks up a localized string similar to File changed: "{0}". Moving to new NodeJS process..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogInformation_HttpEndpoint">
            <summary>
              Looks up a localized string similar to Connected to NodeJS through {0}. Endpoint: {1}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogInformation_InvokingRegisteredFileChangedHandlers">
            <summary>
              Looks up a localized string similar to Invoking registered file changed handlers, file path: "{0}"..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogInformation_KillingNodeJSProcess">
            <summary>
              Looks up a localized string similar to Killing NodeJS process: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogInformation_ProcessExitedBeforeConnecting">
            <summary>
              Looks up a localized string similar to Process exited before connecting..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogWarning_ConnectionAttemptFailed">
            <summary>
               Looks up a localized string similar to An attempt to connect to NodeJS failed. Retries remaining: {0}.
            Exception:
              {1}.
             </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogWarning_InvocationAttemptFailed">
            <summary>
               Looks up a localized string similar to An invocation attempt failed. Retries using existing process remaining: {0}.
            Exception:
              {1}.
             </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.LogWarning_RetriesInExistingProcessExhausted">
            <summary>
              Looks up a localized string similar to Retries in existing process exhausted. Process retries remaining: {0}..
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.Strings.Obsolete_MoveToNewProcess">
            <summary>
              Looks up a localized string similar to Use MoveToNewProcessAsync instead since it allows for asynchronous waiting..
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.BlockDrainerService">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IBlockDrainerService" />.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.BlockDrainerService._drainTaskCompletionSource">
            <summary>
            The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> for the drain event.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.BlockDrainerService._count">
            <summary>
            The number of operations in the block of code or one less than if an operation is draining the block.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.BlockDrainerService._entranceLock">
            <summary>
            The lock for entering the block of code.
            </summary>
        </member>
        <member name="F:Jering.Javascript.NodeJS.BlockDrainerService._disposed">
            <summary>
            Whether the instance is disposed.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.BlockDrainerService.EnterBlockAsync">
            <summary>
            Enter the block of code.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <remarks>The calling operation must call <see cref="M:Jering.Javascript.NodeJS.IBlockDrainerService.ExitBlock" /> in a finally block after the block of code.</remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.BlockDrainerService.ExitBlock">
            <summary>
            Exit the block of code.
            </summary>
            <remarks>Each call to this method must be preceded by exactly one call to <see cref="M:Jering.Javascript.NodeJS.IBlockDrainerService.EnterBlockAsync" />.</remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.BlockDrainerService.DrainBlockAndPreventEntryAsync">
            <summary>
            Drain the block of code of operations.
            </summary>
            <remarks>To drain the block, this method prevents new operations from entering the block.</remarks>
            <remarks>The calling operation must call <see cref="M:Jering.Javascript.NodeJS.IBlockDrainerService.ResetAfterDraining" /> in a finally block after the logic that required the draining.</remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.BlockDrainerService.ResetAfterDraining">
            <summary>
            Resets the <see cref="T:Jering.Javascript.NodeJS.BlockDrainerService" /> after draining.
            </summary>
            <remarks>Each call to this method must be preceded by exactly one call to <see cref="M:Jering.Javascript.NodeJS.IBlockDrainerService.DrainBlockAndPreventEntryAsync" />.</remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.BlockDrainerService.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks>This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.</remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.BlockDrainerService.Dispose(System.Boolean)">
            <summary>
            Disposes the instance.
            </summary>
            <param name="disposing">True if the object is disposing or false if it is finalizing.</param>
            <remarks>This method is not thread-safe. It should only be called after all other calls to this instance's methods have returned.</remarks>
        </member>
        <member name="T:Jering.Javascript.NodeJS.DisposeTrackingSemaphoreSlim">
            <summary>
            Light wrapper of <see cref="T:System.Threading.SemaphoreSlim" /> that tracks whether or not it is disposed.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.DisposeTrackingSemaphoreSlim.ReleaseIfNotDisposed">
            <summary>
            Calls <see cref="M:System.Threading.SemaphoreSlim.Release" /> if the <see cref="T:System.Threading.SemaphoreSlim" /> is not disposed.
            </summary>
            <remarks>Allows us to avoid an <see cref="T:System.ObjectDisposedException" />.</remarks>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IBlockDrainerService">
            <summary>
            Synchronization type used to drain operations from a code block.
            </summary>
            <remarks>In order to drain operations from a block, we must keep track of operations in the block. This is done using <see cref="M:Jering.Javascript.NodeJS.IBlockDrainerService.EnterBlockAsync" /> and
            <see cref="M:Jering.Javascript.NodeJS.IBlockDrainerService.ExitBlock" />. Draining is done using <see cref="M:Jering.Javascript.NodeJS.IBlockDrainerService.DrainBlockAndPreventEntryAsync" />.</remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IBlockDrainerService.EnterBlockAsync">
            <summary>
            Enter the block of code.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <remarks>The calling operation must call <see cref="M:Jering.Javascript.NodeJS.IBlockDrainerService.ExitBlock" /> in a finally block after the block of code.</remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IBlockDrainerService.ExitBlock">
            <summary>
            Exit the block of code.
            </summary>
            <remarks>Each call to this method must be preceded by exactly one call to <see cref="M:Jering.Javascript.NodeJS.IBlockDrainerService.EnterBlockAsync" />.</remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IBlockDrainerService.DrainBlockAndPreventEntryAsync">
            <summary>
            Drain the block of code of operations.
            </summary>
            <remarks>To drain the block, this method prevents new operations from entering the block.</remarks>
            <remarks>The calling operation must call <see cref="M:Jering.Javascript.NodeJS.IBlockDrainerService.ResetAfterDraining" /> in a finally block after the logic that required the draining.</remarks>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IBlockDrainerService.ResetAfterDraining">
            <summary>
            Resets the <see cref="T:Jering.Javascript.NodeJS.BlockDrainerService" /> after draining.
            </summary>
            <remarks>Each call to this method must be preceded by exactly one call to <see cref="M:Jering.Javascript.NodeJS.IBlockDrainerService.DrainBlockAndPreventEntryAsync" />.</remarks>
        </member>
        <member name="T:Jering.Javascript.NodeJS.ITaskService">
            <summary>
            An abstraction for <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ITaskService.Run(System.Action)">
            <summary>
            Queues the specified work to run on the thread pool and returns a Task object that represents that work.
            </summary>
            <param name="action">The work to execute asynchronously.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ITaskService.WaitAll(System.Threading.Tasks.Task[])">
            <summary>
            Waits for all of the provided Task objects to complete execution.
            </summary>
            <param name="tasks">An array of Task instances on which to wait.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.ITaskService.WhenAll(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.TaskService">
            <summary>
            Default implementation of <see cref="T:Jering.Javascript.NodeJS.ITaskService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.TaskService.Run(System.Action)">
            <summary>
            Queues the specified work to run on the thread pool and returns a Task object that represents that work.
            </summary>
            <param name="action">The work to execute asynchronously.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.TaskService.WaitAll(System.Threading.Tasks.Task[])">
            <summary>
            Waits for all of the provided Task objects to complete execution.
            </summary>
            <param name="tasks">An array of Task instances on which to wait.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.TaskService.WhenAll(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.EmbeddedResourcesService">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IEmbeddedResourcesService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.EmbeddedResourcesService.ReadAsString(System.Reflection.Assembly,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly, as a string.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="embeddedResourceAssembly">The assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a string.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no embedded resource with the specified name.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.EmbeddedResourcesService.ReadAsString(System.Type,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a string.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="typeFromEmbeddedResourceAssembly">Any <see cref="T:System.Type" /> in the assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a string.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no embedded resource with the specified name.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.EmbeddedResourcesService.ReadAsStream(System.Reflection.Assembly,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a stream.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="embeddedResourceAssembly">The assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a stream.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no embedded resource with the specified name.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.EmbeddedResourcesService.ReadAsStream(System.Type,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a stream.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="typeFromEmbeddedResourceAssembly">Any <see cref="T:System.Type" /> in the assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a stream.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no embedded resource with the specified name.</exception>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IEmbeddedResourcesService">
            <summary>
            An abstraction for reading of embedded resources.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IEmbeddedResourcesService.ReadAsString(System.Reflection.Assembly,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly, as a string.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="embeddedResourceAssembly">The assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a string.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no embedded resource with the specified name.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IEmbeddedResourcesService.ReadAsString(System.Type,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a string.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="typeFromEmbeddedResourceAssembly">Any <see cref="T:System.Type" /> in the assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a string.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no embedded resource with the specified name.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IEmbeddedResourcesService.ReadAsStream(System.Reflection.Assembly,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a stream.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="embeddedResourceAssembly">The assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a stream.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no embedded resource with the specified name.</exception>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IEmbeddedResourcesService.ReadAsStream(System.Type,System.String)">
            <summary>
                <para>Reads the embedded resource with the specified name from a given assembly as a stream.</para>
                <para>When building a managed dll,
            the name of an embedded resource can be specified using the LogicalName attribute of the EmbeddedResource element.</para>
            </summary>
            <param name="typeFromEmbeddedResourceAssembly">Any <see cref="T:System.Type" /> in the assembly that contains the embedded resource.</param>
            <param name="name">The name of the embedded resource to be read.</param>
            <returns>The contents of the resource as a stream.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no embedded resource with the specified name.</exception>
        </member>
        <member name="T:Jering.Javascript.NodeJS.EnvironmentService">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IEnvironmentService" />.
            </summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.EnvironmentService.ProcessorCount">
            <summary>
            Gets the number of processors on the current machine.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IEnvironmentService">
            <summary>
            An abstraction for <see cref="T:System.Environment" /></summary>
        </member>
        <member name="P:Jering.Javascript.NodeJS.IEnvironmentService.ProcessorCount">
            <summary>
            Gets the number of processors on the current machine.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.FileWatcherService">
            <summary>
            Default implementation of <see cref="T:Jering.Javascript.NodeJS.IFileWatcherService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.FileWatcherService.#ctor(Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.NodeJSProcessOptions},Microsoft.Extensions.Options.IOptions{Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions},Microsoft.Extensions.Logging.ILogger{Jering.Javascript.NodeJS.FileWatcherService})">
            <summary>
            Creates a <see cref="T:Jering.Javascript.NodeJS.FileWatcherService" />.
            </summary>
            <param name="nodeJSProcessOptionsAccessor">
            </param>
            <param name="outOfProcessNodeJSServiceOptions">
            </param>
            <param name="logger">
            </param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.FileWatcherService.AddFileChangedListenerAsync(System.Action)">
            <summary>
            Add a listener for file changes.
            </summary>
            <param name="fileChanged">The listener.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.FileWatcherService.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:System.IO.FileSystemWatcher" /> instance.
            </summary>
            <param name="disposing">True if the object is disposing or false if it is finalizing.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.FileWatcherService.Dispose">
            <summary>
            Disposes the <see cref="T:System.IO.FileSystemWatcher" /> instance.
            </summary>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IFileWatcherService">
            <summary>
            A service for watching files for changes.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IFileWatcherService.AddFileChangedListenerAsync(System.Action)">
            <summary>
            Add a listener for file changes.
            </summary>
            <param name="fileChanged">The listener.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.IJsonService">
            <summary>
                <para>An abstraction for JSON serialization/deserialization.</para>
                <para>To perform custom JSON serialization/deserialization, implement this interface and overwrite the default DI service for <see cref="T:Jering.Javascript.NodeJS.IJsonService" />.</para>
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IJsonService.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Deserializes the JSON contained by <paramref name="stream" /> into a <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the object to create.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the JSON to deserialize.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel deserialization.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.IJsonService.SerializeAsync``1(System.IO.Stream,``0,System.Threading.CancellationToken)">
            <summary>
            Serializes <paramref name="value" /> and writes the generated JSON to <paramref name="stream" />.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to write generated JSON to.</param>
            <param name="value">The object to serialize.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel serialization.</param>
        </member>
        <member name="T:Jering.Javascript.NodeJS.JsonService">
            <summary>
            The default implementation of <see cref="T:Jering.Javascript.NodeJS.IJsonService" />.
            </summary>
        </member>
        <member name="M:Jering.Javascript.NodeJS.JsonService.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Deserializes the JSON contained by <paramref name="stream" /> into a <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the object to create.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the JSON to deserialize.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel deserialization.</param>
        </member>
        <member name="M:Jering.Javascript.NodeJS.JsonService.SerializeAsync``1(System.IO.Stream,``0,System.Threading.CancellationToken)">
            <summary>
            Serializes <paramref name="value" /> and writes the generated JSON to <paramref name="stream" />.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to write generated JSON to.</param>
            <param name="value">The object to serialize.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel serialization.</param>
        </member>
    </members>
</doc>